;;
;; GF contract model, version I.
;;

(defcontract gfContract admin-address

  ;; events to be emitted, aggragated in logs
  (defevent mint-event [^address who ^decimal amount])
  (defevent burn-event [^address who ^decimal amount])
  (defevent dispatch-event [^address from ^address to ^decimal amount])
  
  (defrecord gf
      [^decimal total-supply
       ^decimal available-supply])

  (defrecord balances
      [^address owner
       ^address token-id
       ^decimal balance])

  (defrecord minters
      [^address minter
       ^address token-id])

  (defrecord burners
      [^address burner
       ^address token-id])

  (deftable gf-table ^{gf})  ;; key ^address token-id
  (create-table gf-table)

  (deftable balances-table ^{balances})  ;; key (hash token-id owner)
  (create-table balances-table)

  (deftable minters-table ^{minters}) ;; key (hash token-id minter)
  (create-table minters-table)

  (deftable burners-table ^{burners}) ;; key (hash token-id burner)
  (create-table burners-table)

  (defn get-total-supply [token-id]
    (with-default-read gf-table token-id
      {:total-supply -1}
      {total-supply total-supply}
      (enforce (not= -1 total-supply) "not yet issued")
      total-supply))

  (defn get-available-supply [token-id]
    (with-default-read gf-table token-id
      {:available-supply -1}
      {available-supply available-supply}
      (enforce (not= -1 available-supply) "not yet issued")
      available-supply))

  (defn get-balance [token-id who]
    (with-default-read balances-table (hash token-id who)
      {:balance -1}
      {balance :balance}
      (enforce (not= -1 balance) "not have account")
      balance))

  (defn issue [token-id init-supply]
    (with-default-read gf-table token-id
      {:total-supply -1}
      {total-supply :total-supply}
      (enforce (= -1 total-supply) "already issued")
      (insert gf-table token-id {:total-supply init-supply
                                 :available-supply init-supply})))

  (defn mint [token-id amount]
    (let [me (MSG_SENDER)]
     (with-default-read minters-table (hash token-id me)
       {:minter ""}
       {minter :minter}
       (enforce (not= minter "") "need minter role")
       (with-default-read gf-table token-id
         {:total-supply -1}
         {total-supply :total-supply}
         (enforce (not= total-supply -1) "not yet issued")
         (update gf-table token-id {:total-supply (+ total-supply amount)
                                    :available-supply (+ available-supply amount)})
         (emit-event (mint-event {:who me :amount amount}))))))

  (defn burn [token-id amount]
    (let [me (MSG_SENDER)]
     (with-default-read burners-table (hash token-id me)
       {:burner ""}
       {burner :burner}
       (enforce (not= minter "") "need burner role")
       (with-default-read gf-table token-id
         {:total-supply -1}
         {total-supply :total-supply
          available-supply :available-supply}
         (enforce (not= total-supply -1) "not yet issued")
         (enforce (>= available-supply amount) "Insufficient supply")
         (update gf-table token-id {:total-supply (- total-supply amount)
                                    :available-supply (- available-supply amount)})
         (emit-event (burn-event {:who me :amount amount}))))))

  (defn dispatch [token-id amount to]
    (let [me (MSG_SENDER)]
      (enforce (= admin-address me) "need admin")
      (with-default-read gf-table token-id
        {:total-supply -1}
        {total-supply :total-supply
         available-supply :available-supply}
        (enforce (not= total-supply -1) "not yet issued")
        (enforce (>= available-supply amount) "Insufficient supply")
        (with-default-read balances-table (hash token-id owner)
          {:balance -1}
          {balance :balance}
          (if (= balance -1)
            (insert balances-table (hash token-id to)
                    {:owner    to
                     :token-id token-id
                     :balance  amount})
            (update balances-table (hash token-id to)
                    {:owner    to
                     :token-id token-id
                     :balance  (+ amount balance)}))
          (update gf-table token-id {:available-supply (- available-supply amount)})
          (emit-event (dispatch-event {:from me :to to :amount amount}))))))
  
)
