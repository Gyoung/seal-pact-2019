;;
;; RealEstate contract model, version III.
;;

;; 问题：直接transfer to address? 内部要维护balance?


(defcontract realestateContract admin-address

  ;;(defevent transfer-event [^address from ^address to ^string token-id])

  ;; need get-accounts


  ;; ==== real estate table ====
  (defrecord realestate
      [^string name
       ^string type
       ^string info
       ^decimal buy-price
       ^decimal total-shares
       ^decimal available-shares
       ^address owner])

  (deftable realestate-table ^{realestate}) ;; key: ^string token-id

  (create-table realestate-table)

  ;; ==== announcement table =====
  (defrecord announce
      [^string text])
  
  (deftable announce-table ^{announce}) ;; key ^string announce

  (create-table announce-table)

  ;; ==== stake holder table ====
  (defrecord stakeholder
      [^address holder
       ^decimal shares])

  (deftable stakeholder-table ^{stakeholder}) ;; key: ^string (hash token-id holder)

  (create-table stakeholder-table)


  ;; ==== balance table ====
  (defrecord balance
      [;; ^address account
       ^decimal amount])

  (deftable balance-table ^{balance}) ;; key: ^string (hash token-id account)

  (create-table balance-table)
  
  ;; use (hash [sender receiver]) as id
  ;;(deftable allowance-table ^{allowance})

  (defn- get-hash [owner spender]
    (hash [owner spender]))

  (defn token.new
    [token-id name type owner info]
    (let [me (MSG_SENDER)]
      (enforce (= admin-address me) "need admin")
      (insert realestate-table token-id
              {:name             name
               :type             type
               :owner            owner
               :info             info
               :buy-price        0
               :total-shares     0
               :available-shares 0})))

  (defn token.startIssue
    [token-id total-shares buy-price info]
    (let [me (MSG_SENDER)]
      (enforce (= admin-address me) "need admin")
      (with-default-read realestate-table token-id
        {:buy-price -1}
        {buy-price :buy-price}
        (enforce (not= -1 buy-price) "token-id not exists")
        (update realestate-table token-id
                {:total-shares total-shares
                 :buy-price buy-price
                 :info info}))))

  (defn token.stopIssue
    [token-id]
    (let [me (MSG_SENDER)]
      (enforce (= admin-address me) "need admin")
      (with-default-read realestate-table token-id
        {:buy-price -1}
        {buy-price :buy-price}
        (enforce (not= -1 buy-price) "token-id not exists")
        (update realestate-table token-id
                {:buy-price 0}))))

  (defn token.return
    ;; return balance of contract address to msg.sender
    [token-id]
    (let [me (MSG_SENDER)
          id (get-hash token-id me)]
      (enforce (= admin-address me) "need admin")
      (with-default-read balance-table id
        {:amount -1}
        {amount :amount}
        (enforce (not= -1 amount) "record not exists")
        (TRANSFER (CONTRACT-ADDRESS) me amount))))

  (defn token.balance
    [addr token-id]
    (with-readth-default-read balance-table (get-hash token-id addr)
      {:amount 0}
      {amount :amount}
      amount))

  (defn token.info
    [token-id]
    (with-default-read realestate-table token-id
      {:info ""}
      {info :info}
      info))

  ;; 公告相关，不是核心功能，先往后放。先实现核心功能
  ;; 思路大概是用select实现
  ;; (defn token.announce ;; 发公告 TODO
  ;;   [token-id str]
  ;;   )

  ;; (defn token.announces ;; 查询公告 TODO
  ;;   [token-id]
  ;;   (with-default-read realestate-table token-id ;; 小表?
  ;;     {}))
  

  (defn total-shares [token-id]
    (with-read realestate-table token-id
      {shares :total-shares}
      shares))
  
  (defn available-shares [token-id]
    (with-read realestate-table token-id
      {shares :available-shares}
      shares))

  (defn change-price [token-id buy-price sell-price]
    (enforce (= admin-address (MSG_SENDER)) "need admin")
    (update realestate-table token-id
            {:buy-price buy-price :sell-price sell-price}))

  (defn- upsert-add [table key field amount]
    (with-default-read table key {field -1} {old-amount field}
      (if (= -1 old-amount)
        (insert table key {field amount})
        (update table key {field (+ amount old-amount)}))))

  (defn token.buy [token-id shares]
    (enforce (>= shares 300) "Invalid Shares")
    (with-read realestate-table token-id
      {buy-price :buy-price
       available-shares :available-shares
       owner :owner}
      (enforce (>= available-shares shares) "Insufficient Available Shares")
      (let [cost (* buy-price shares)
            me (MSG_SENDER)
            id (get-hash token-id me)]
        ;; (send owner me cost) ;; send to from value
        (TRANSFER me (CONTRACT-ADDRESS) cost)
        (upsert-add stakeholder-table id :shares shares)
        (update realestate-table token-id {:available-shares (- available-shares shares)}))))

  (defn shares-of [token-id]
    (let [me (MSG_SENDER)]
      (with-read stakeholder-table (get-hash token-id me)
        {shares :shares}
        shares)))

  (defn dividend-one [per-share owner id]
    (with-default-read stakeholder-table id
      {:shares -1}
      {id :id holder :holder shares :shares}
      (if (not= -1 shares)
       (if (= id (get-hash token-id me))
         (let [div (* per-share shares)]
           (TRANSFER (CONTRACT-ADDRESS) holder div)
           div)))))
  
  (defn token.dividend [token-id per-share]
    (with-read realestate-table token-id
      {available-shares :available-shares total-shares :total-shares owner :owner}
      (let [total (* per-share total-shares)
            hold (- total (* per-share available-shares))]
        ;; 校验总金额是为了解决除法不精确的问题？
        ;; 若出现除不尽则用户无法解决
        ;; 可以通过设置 maxAmount 来处理
        (enforce (>= (MSG_VALUE) total))
        (TRANSFER (MSG_SENDER) (CONTRACT-ADDRESS) total)
        (enforce (= (fold (+) 0
                          (map (dividend-one per-share owner)
                               (get-accounts token-id)))
                    total)))))

  (defn token.redeem
    ;; return msg.sender's balance to himself
    [token-id redeem-amount]
    (let [me (MSG_SENDER)
          id (get-hash token-id me)]
      (with-default-read balance-table id
        {:amount -1}
        {amount :amount}
        (enforce (> amount redeem-amount) "not sufficient")
        (TRANSFER (CONTRACT-ADDRESS) me amount))))

  (defn token.deposit
    [token-id amount]
    (let [me (MSG_SENDER)
          id (get-hash token-id me)]
      (upsert-add balance-table id :amount amount))))


(let [token-id (token.new "001" "my token" "SPV" "owner1" "info")
      totol-shares 10000
      buy-price 1.3
      info "info1"
      me (MSG_SENDER) ;; TODO assume me is admin
      ]
  
  (token.startIssue token-id total-shares buy-price info)
  ;; (token.stopIssue token-id)

  (format "After ISSUE, contract balance ==> expected: 0, actually: {}" [(token.balance (CONTRACT-ADDRESS) token-id)])
  (format "available-shares ==> expected: 10000, actually: {}" [(available-shares)])
  (format "total-shares ==> expected: 9700, actually: {}" [(total-shares)])
  (format "token.info ==>" (token.info))

  (token.deposit token-id 500)
  (format "After DEPOSIT, my balance ==> expected: 500, actually: {}" [(token.balance me token-id)])
  
  (token.buy token-id 300)

  (format "After BUY, contract balance ==> expected: 390, actually: {}" [(token.balance me token-id)])
  (format "BUY should not change balance: my shares ==> expected: 500, actually: {}" [(shares-of token-id)])
  
  (token.return token-id)

  (format "RETURN should not change my balance, my balance ==> expected: 500, actually: {}" [(token.balance me token-id)])
  (format "RETURN should not change stakeholder's shares: my shares ==> expected: 300, actually: {}" [(shares-of token-id)])

  (token.dividend token-id 1)

  (format "After DIVIDEND: contract balance ==> expected: 9970, actually: {}" [(token.balance (CONTRACT-ADDRESS) token-id)])
  (format "DIVIDEND should not change stakeholder's balance: my balance ==> expected: 0, actually: {}" [(token.balance me token-id)])

  (token.redeem token-id 200)
  (format "After REDEEM, my balance ==> expected: 300, actually: {}" [(token.balance me token-id)])
  (format "REDEEM should not change stakeholder's shares: my shares ==> expected: 300, actually: {}" [(shares-of token-id)])
  )
